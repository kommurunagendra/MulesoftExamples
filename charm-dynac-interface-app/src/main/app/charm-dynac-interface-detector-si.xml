<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:quartz="http://www.mulesoft.org/schema/mule/quartz" xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml" xmlns:jms="http://www.mulesoft.org/schema/mule/jms"
	xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:cxf="http://www.mulesoft.org/schema/mule/cxf" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd
http://www.mulesoft.org/schema/mule/jms http://www.mulesoft.org/schema/mule/jms/current/mule-jms.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/cxf http://www.mulesoft.org/schema/mule/cxf/current/mule-cxf.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/quartz http://www.mulesoft.org/schema/mule/quartz/current/mule-quartz.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-current.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd">
    
    <sub-flow name="detector-inventory-subscription">
        <logger message="=== Detector-si inventory subscription outgoing ===" level="INFO" category="dynac-interface-app" doc:name="Logger"/>
        <flow-ref name="transformToXML" doc:name="transformToXML"/>
        <dw:transform-message doc:name="Prepare deviceInformationSubscriptionMsg Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml encoding="UTF-8", skipNullOn="everywhere"
%namespace tmdd http://www.tmdd.org/3/messages
---
tmdd#deviceInformationSubscriptionMsg: {
	authentication: {
		user-id: p('user_id'),
		password: p('password')
	},
	
	organization-information : {
		organization-id : p('organization_information.organization_id'),
		(organization-function : payload.detector_si_inventory_subscription.subscription_config.owner when payload.detector_si_inventory_subscription.subscription_config.owner != null otherwise {})
	
	},
	
	organization-requesting: {
		organization-id : p('organization_information.organization_id')
	},
	
	device-type : 'detector-si',
	
	device-information-type: 'device inventory',
		
	(device-filter : {
		device-id-list : {
		(payload.detector_si_inventory_subscription.subscription_config.*detector_spec  map
			device-id  : $.detector_id.id
		)
		}
	}) when payload.detector_si_inventory_subscription.subscription_config.*detector_spec != null,
	 	
	c2cMsgAdmin: {
		returnAddress: p('dynac_interface.return_address'),
		subscriptionAction: {
			subscriptionAction-item: 'replaceSubscription'
		},
		subscriptionType: {
			subscriptionType-item: 'onChange'
		},
		subscriptionID: payload.detector_si_inventory_subscription.subscription_config.subscription_id.uuid,
		subscriptionName: payload.detector_si_inventory_subscription.subscription_config.subscription_attr.subscription_name,
		subscriptionFrequency: 1
	}
}]]></dw:set-payload>
        </dw:transform-message>
        <flow-ref name="ntcip_client" doc:name="ntcip_client"/>
    </sub-flow>
    
    <sub-flow name="detector-inventory-subscription-NTCIP-To-CDM">

        <flow-ref name="transformToXML" doc:name="transformToXML"/>
        <flow-ref name="generateUUID" doc:name="generateUUID"/>
        <dw:transform-message doc:name="Prepare detector-inventory-subscription Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml encoding="UTF-8"
%var timeZone = now as :string {format: "yyyy-MM-dd"} ++ "T" ++ now as :string {format: "hh:mm:ss"} ++ "Z"
---
detector_si_inventory_subscription @(xmlns: "http://detector.si.cdm.charm.cgi.com", version:"1.0.0") : {	
	
	meta: {
		message_id: { 
			uuid : flowVars.uuid
		},
		message_create_date: timeZone 
	},
	
	subscription_config : {
		subscription_id : {
			uuid : payload.deviceInformationSubscriptionMsg.c2cMsgAdmin.subscriptionID
		},
		
		subscription_attr : {
			subscription_name : payload.deviceInformationSubscriptionMsg.c2cMsgAdmin.subscriptionName,
			subscription_type: 'inventory'
		},
		
		all_feps : true,
		all_outstations : true,
		 
		(
			all_detectors : {
				(payload.deviceInformationSubscriptionMsg.device-filter.device-id-list.*device-id map {
								detector_spec : {
									detector_id : {
										id : $.device-id
									}
								}
							})
			} when payload.deviceInformationSubscriptionMsg.device-filter.device-id-list.*device-id != null
			  otherwise true
		),
		
		(owner :  payload.deviceInformationSubscriptionMsg.organization-information.organization-function when payload.deviceInformationSubscriptionMsg.organization-information.organization-function != null otherwise {})	
		
		
	}
}]]></dw:set-payload>
        </dw:transform-message>

        <byte-array-to-string-transformer doc:name="Byte Array to String"/>
		<flow-ref name="outbound_cdm_backbone_oneway" doc:name="outbound_cdm_backbone_oneway" />

		<static-component>
			<return-data file="static_messages/c2cMessageReceipt_ok.xml" />
		</static-component>
	</sub-flow>
	
	 <sub-flow name="detector-inventory-publish">
         <logger message="=== Detector-si inventory publish incoming ===" level="INFO" category="dynac-interface-app" doc:name="Logger"/>
         <mulexml:xslt-transformer xsl-file="xslt/detector/transformToInventoryPublishCDM.xsl" doc:name="construct detector Inventory Publish" returnClass="java.lang.String">
			<mulexml:context-property key="current_time_in_millis" value="#[System.currentTimeMillis()]"/>
			<mulexml:context-property key="message_uuid" value="#[function:uuid]"/>
		</mulexml:xslt-transformer>

        <flow-ref name="outbound_cdm_backbone_oneway" doc:name="outbound_cdm_backbone_oneway"/>
        <static-component>
			<return-data file="static_messages/c2cMessageReceipt_ok.xml" />
		</static-component> 
    </sub-flow>
    
 	<sub-flow name="detector-inventory-publish-nina-variant">
        <logger message="=== Detector-si inventory publish Nina outgoing ===" level="INFO" category="dynac-interface-app" doc:name="Logger"/>
        <flow-ref name="transformToXML" doc:name="transformToXML"/>
        <dw:transform-message doc:name="Prepare detectorInventoryUpdateMsg  Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml encoding="UTF-8"
%var timeZone = now as :string {format: "yyyy-MM-dd"} ++ "T" ++ now as :string {format: "hh:mm:ss"} ++ "Z"
%namespace tmdd http://www.tmdd.org/3/messages
%namespace xsi http://www.w3.org/2001/XMLSchema-instance
---
tmdd#detectorInventoryUpdateMsg : {	
	
	c2cMsgAdmin: {
		(informationalText:  'FULLSYNC' when payload.detector_si_inventory_publish.inventory_config.full_sync == 'true'
		otherwise {}
		),
		subscriptionID : payload.detector_si_inventory_publish.subscription_id.uuid
		},			
				
		((payload.detector_si_inventory_publish.inventory_config.*outstation_inventory map {
			 detector-inventory-item @(xsi#type : 'tmdd:DetectorInventoryNDW') : {
			 	detector-station-inventory-header @(xsi#type : 'tmdd:DeviceInventoryHeaderCharm') : {
			 		
			 		organization-information : {
			 			organization-id : p('organization_information.organization_id')
			 		},
			 		
			 		device-id : $.outstation_id.id,
			 		
			 		device-location : {
			 			latitude : $.outstation_location_attr.position_wgs84.latitude,
			 			longitude : $.outstation_location_attr.position_wgs84.longitude
			 		},
			 		
			 		device-name : $.outstation_inventory_attr.name,
			 		
			 		(device-description : $.outstation_inventory_attr.description when $.outstation_inventory_attr.description != null otherwise {}),
			 					 		
			 		scan-on-off : $.outstation_inventory_attr.scan_enabled,
			 		
			 		scan-interval : $.outstation_inventory_attr.scan_interval,
			 		
			 		inventory-action : $.action,			 	
			 			
			 		parent-device-id : $.outstation_inventory_attr.outstation_address.fep_id.id,
			 					 				 		
			 		station-line-number : $.outstation_inventory_attr.outstation_address.os_line_number,
			 		
			 		station-line-position : $.outstation_inventory_attr.outstation_address.os_line_position,
			 					 		
			 		position-bps-code : $.outstation_location_attr.position_bps,
			 		
			 		(data-owner : $.outstation_inventory_attr.owner when $.outstation_inventory_attr.owner != null otherwise {})
			 	},
			 	detector-list : {
			 		detector  @(xsi#type : 'tmdd:DetectorInventoryDetailsCharm'): {
			 			detector-inventory-header  @(xsi#type : 'tmdd:DeviceInventoryHeaderCharm') : {
			 				organization-information : {
			 					organization-id : p('organization_information.organization_id')
			 				},
			 				
			 				device-id : $.outstation_id.id,
			 				
			 				device-name : $.outstation_inventory_attr.name
			 			},
			 			detector-type : "unknown"
			 		}
			 	},
			 	outstation-configuration : {
			 		os-version : $.outstation_inventory_attr.os_version,
               		detector-stations : $.outstation_inventory_attr.detectorstations,
               		detectors : $.outstation_inventory_attr.detectors,
               		detectors-speed-flow : $.outstation_inventory_attr.detectors_sf,
               		speed-flow-enabled : $.outstation_inventory_attr.sf_enabled,
               		msis : $.outstation_inventory_attr.msis,
               		base-aid : $.outstation_inventory_attr.base_aid,
               		msis-arg : $.outstation_inventory_attr.msis_arg,
               		road-code : $.outstation_inventory_attr.outstation_reference.road_code,
               		km-reference : $.outstation_inventory_attr.outstation_reference.km_reference
			 	}
			 }
		})  when payload.detector_si_inventory_publish.inventory_config.*outstation_inventory != null otherwise {}),
		
		((payload.detector_si_inventory_publish.inventory_config.*detector_inventory map {
			 detector-inventory-item @(xsi#type : 'tmdd:DetectorInventoryNDW') : {
			 	detector-station-inventory-header @(xsi#type : 'tmdd:DeviceInventoryHeaderCharm') : {
			 		
			 		organization-information : {
			 			organization-id : p('organization_information.organization_id')
			 		},
			 		
			 		device-id : $.detector_id.id,
			 		device-location : {
			 			latitude : $.detector_location_attr.position_wgs84.latitude,
			 			longitude : $.detector_location_attr.position_wgs84.longitude
			 		},
			 		device-name : $.detector_inventory_attr.name,
			 		(device-description : $.detector_inventory_attr.description when $.detector_inventory_attr.description != null otherwise {}),
			 					 		
			 		scan-on-off : $.detector_inventory_attr.scan_enabled,
			 		
			 		scan-interval : $.detector_inventory_attr.scan_interval,
			 		
			 		inventory-action : $.action,			 	
			 			
			 		parent-device-id : $.detector_inventory_attr.detector_address.outstation_id.id,
			 					 				 		
			 		station-line-number : $.detector_inventory_attr.detector_address.detector_station_nr,
			 		
			 		station-line-position : $.detector_inventory_attr.detector_address.detector_nr,
			 					 		
			 		position-bps-code : $.detector_location_attr.position_bps,
			 		
			 		(data-owner : $.detector_inventory_attr.owner when $.detector_inventory_attr.owner != null otherwise {})
			 		},
			 		detector-list : {
			 		detector  @(xsi#type : 'tmdd:DetectorInventoryDetailsCharm'): {
			 			detector-inventory-header  @(xsi#type : 'tmdd:DeviceInventoryHeaderCharm') : {
			 				organization-information : {
			 					organization-id : p('organization_information.organization_id')
			 				},
			 				
			 				device-id : $.detector_id.id,
			 				
			 				device-name : $.detector_inventory_attr.name
			 			},
			 			detector-type : $.measure_site_table.measurement_equipment_type_used when $.measure_site_table.measurement_equipment_type_used !=null otherwise "unknown",
			 			measure-site-table : {
							id : $.measure_site_table.id,
							version : $.measure_site_table.version,
							site-record-id : $.measure_site_table.measure_site_record.id,
							site-record-version : $.measure_site_table.measure_site_record.version,
							site-record-version-time : toDateAndTime($.measure_site_table.measure_site_record_version_time),
							computation-method : $.measure_site_table.computation_method,
							(measurement-site-name : $.measure_site_table.measurement_site_name) when $.measure_site_table.measurement_site_name != null,
							measurement-site-number-of-lanes : $.measure_site_table.measurement_site_number_of_lanes,
							measurement-side :  $.measure_site_table.measurement_side,
							measurement-specific-characteristics-list : {
								($.measure_site_table.*measurement_specific_characteristics map {
									measurement-specific-characteristic : {
										measure-type : $.measure_value_type,
										accuracy : $.measurement_specific.accuracy,
										period : $.measurement_specific.period,
										specific-lane : $.measurement_specific.lane,
										(vehicle-characteristics-list : {
											($.*vehicle_characteristics map {
												vehicle_characteristic : {
													vc-code : $.vc_code,
													comparison : $.comparison,
													length : $.length
												}
											})
										}) when $.*vehicle_characteristics != null and $.vehicle_no_characteristics == null,
										index : $.index
									}
								})
							}
						}	 			
			 		}
			 	
			 	},
			 	carriageway : $.measure_site_table.measure_site_location.position_extension.carriageway,
				(measurement-equipment-ref : $.measure_site_table.measurement_equipment_reference) when $.measure_site_table.measurement_equipment_reference != null
			 	}
			 	}) when payload.detector_si_inventory_publish.inventory_config.*detector_inventory != null otherwise {})
}]]></dw:set-payload>
        </dw:transform-message>
		<flow-ref name="ntcip_client" doc:name="ntcip_client" />
    </sub-flow>
    
	<sub-flow name="detector-info-request-status">
        <logger message="=== Detector-si info request status incoming ===" level="INFO" category="dynac-interface-app" doc:name="Logger"/>
        <mulexml:xslt-transformer xsl-file="xslt/detector/transformToInfoRequestStatusCDM.xsl" doc:name="construct detector info request" returnClass="java.lang.String">
			<mulexml:context-property key="current_time_in_millis" value="#[System.currentTimeMillis()]"/>
			<mulexml:context-property key="message_uuid" value="#[function:uuid]"/>
		</mulexml:xslt-transformer>
        <logger message="=== Detector-si info reply status outgoing ===" level="INFO" category="dynac-interface-app" doc:name="Logger"/>
        <flow-ref name="outbound_cdm_backbone_request_response" doc:name="outbound_cdm_backbone_request_response"/>
        <expression-filter expression="#[! (payload.contains('faultcode'))]" doc:name="Expression"/>
        <mulexml:jaxb-xml-to-object-transformer jaxbContext-ref="cdm" doc:name="XML to JAXB Object"/>
        <invoke object-ref="cdmDetectorToDetectorStatus" method="handle" methodArguments="#[payload]" methodArgumentTypes="com.cgi.charm.cdm.si.detector.DetectorSiInfoReply" name="PrepareDetectorStatusMsgMessage" />
        <mulexml:jaxb-object-to-xml-transformer returnClass="java.lang.String" jaxbContext-ref="cdm" doc:name="JAXB Object to XML"/>
      </sub-flow>
	
	<sub-flow name="detector-info-request-inventory">
        <logger message="=== Detector-si info request inventory incoming ===" level="INFO" category="dynac-interface-app" doc:name="Logger"/>
        <flow-ref name="transformToXML" doc:name="transformToXML"/>
        <flow-ref name="generateUUID" doc:name="generateUUID"/>
        <dw:transform-message doc:name="Prepare detector_info_request Inventory Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml encoding = "UTF-8"
%var timeZone = now as :string {format: "yyyy-MM-dd"} ++ "T" ++ now as :string {format: "hh:mm:ss"} ++ "Z"
---
detector_si_info_request @(xmlns: "http://detector.si.cdm.charm.cgi.com", version:"1.0.0"): {
	meta: {
		message_id: {
			uuid: flowVars.uuid
		},
		message_create_date: timeZone
	},	
	info_spec: {
		inventory: true when payload.detectorInventoryRequestMsg.device-information-type == "device inventory"
				otherwise false,
		status: false,
		data: false
	},
	(all_feps : true when payload.detectorInventoryRequestMsg.device-filter.device-id-list == null
		otherwise {(payload.detectorInventoryRequestMsg.device-filter.device-id-list.*device-id map {
			fep_spec:{
				fep_id:{
					id: $.device-id
				}
			}
		})
	}),
	(all_outstations : true when payload.detectorInventoryRequestMsg.device-filter.device-id-list == null
		otherwise {(payload.detectorInventoryRequestMsg.device-filter.device-id-list.*device-id map {
			outstation_spec:{
				outstation_id:{
					id: $.device-id
				}
			}
		})
	}),
	(
	all_detectors: true when payload.detectorInventoryRequestMsg.device-filter.device-id-list == null
		otherwise {(payload.detectorInventoryRequestMsg.device-filter.device-id-list.*device-id map {
			detector_spec:{
				detector_id:{
					id: $.device-id
				}
			}
		})
	}),
	all_subscriptions: false
}]]></dw:set-payload>
        </dw:transform-message>
		<byte-array-to-string-transformer doc:name="Byte Array to String"/>
		<flow-ref name="outbound_cdm_backbone_request_response" doc:name="outbound_cdm_backbone_request_response"/>
        <flow-ref name="transformToXML" doc:name="transformToXML"/>
        <set-variable variableName="detectorInfoReplyDetails" value="#[payload]" doc:name="DetectorInfoReplayDetails"/>
        <choice doc:name="Choice">
            <when expression="#[xpath3('//*:detector_publish',payload,&quot;NODE&quot;) != null]">
                <logger message="Detector Info Reply contains detector publish details." level="DEBUG" doc:name="Logger" category="dynac-interface-app"/>
                <dw:transform-message metadata:id="e9607521-2677-4f9a-b50d-fdee9d8i0i00" doc:name="Prepare detectorInventoryMsg Message for DETECTOR">
                    <dw:input-payload doc:sample="sample_data\empty_4.xml"/>
                    <dw:input-variable doc:sample="sample_data\empty_5.xml" variableName="detectorInfoReplayDetails"/>
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/xml encoding = "UTF-8"
%namespace tmdd http://www.tmdd.org/3/messages
%namespace xsi http://www.w3.org/2001/XMLSchema-instance

%var toDateAndTime = (data) -> {
	date: data  as :date as :string {format : "yyyyMMdd"},		
	time: data  as :localdatetime  as :string {format : "HHmmss"}		
}
---
"detectors" : {
	(payload.detector_si_info_reply.*detector_publish distinctBy ($.detector_id.id)  map {	
		("":{ detector-inventory-item @(xsi#type : 'tmdd:DetectorInventoryNDW'): {
			detector-station-inventory-header @(xsi#type : 'tmdd:DeviceInventoryHeaderCharm'): {				
				organization-information : {
					organization-id : p('organization_information.organization_id')
				},				
				device-id : $.measure_site_table.measure_site_record.id,				
				device-name : $.measure_site_table.id,				
				(device-description : $.measure_site_table.measurement_site_name when $.measure_site_table.measurement_site_name != null otherwise {}),				
				("":{last-update-time : toDateAndTime($.measure_site_table.measure_site_record_version_time)} when $.measure_site_table.measure_site_record_version_time != null otherwise {}),
				(associated-device-id : $.detector_inventory_attr.msi_relation when $.detector_inventory_attr.msi_relation != null otherwise {}),		
				(data-owner : $.detector_inventory_attr.owner when $.detector_inventory_attr.owner != null otherwise {})
			},			
			detector-list : {
				detector @(xsi#type : "tmdd:DetectorInventoryDetailsCharm") : {
					detector-inventory-header @(xsi#type : "tmdd:DeviceInventoryHeaderCharm") : {
						organization-information : {
							organization-id : p('organization_information.organization_id')
						},
						device-id : $.detector_id.id when $.detector_id != null otherwise {},
						(device-location : {
							latitude : $.detector_location_attr.position_wgs84.latitude,
							longitude : $.detector_location_attr.position_wgs84.longitude
						}) when $.detector_location_attr != null,
						device-name : $.detector_inventory_attr.name,
						(device-description : $.detector_inventory_attr.description) when $.detector_inventory_attr.description != null,
						scan-on-off : $.detector_inventory_attr.scan_enabled,
						scan-interval : $.detector_inventory_attr.scan_interval,
						(parent-device-id : $.detector_inventory_attr.detector_address.outstation_id.id) when $.detector_inventory_attr.detector_address != null,
						(station-line-number : $.detector_inventory_attr.detector_address.detector_station_nr when $.detector_inventory_attr.detector_address != null otherwise {}),
						(station-line-position : $.detector_inventory_attr.detector_address.detector_nr when $.detector_inventory_attr.detector_address != null otherwise {}),
						position-bps-code : $.detector_location_attr.position_bps
					},
					(detector-type :  "anpr" when $.measure_site_table.measurement_equipment_type_used == "anpr"
							otherwise "bluetooth" when $.measure_site_table.measurement_equipment_type_used == "bluetooth"
							otherwise "fcd" when $.measure_site_table.measurement_equipment_type_used == "fcd"
							otherwise "infrared" when $.measure_site_table.measurement_equipment_type_used == "infrared"
							otherwise "laser" when $.measure_site_table.measurement_equipment_type_used == "laser"
							otherwise "inductive loop" when $.measure_site_table.measurement_equipment_type_used == "loop"
							otherwise "microwave" when $.measure_site_table.measurement_equipment_type_used == "microwave"
							otherwise "radar" when $.measure_site_table.measurement_equipment_type_used == "radar"
							otherwise "traffic counter tube" when $.measure_site_table.measurement_equipment_type_used == "traffic counter tube"
							otherwise "video Image" when $.measure_site_table.measurement_equipment_type_used == "video detection"
							otherwise "traffic control system" when $.measure_site_table.measurement_equipment_type_used == "traffic control system"
							otherwise "data fusion" when $.measure_site_table.measurement_equipment_type_used == "data fusion"
							otherwise "other" when $.measure_site_table.measurement_equipment_type_used == "other"
							otherwise "unknown"
					) when $.measure_site_table.measurement_equipment_type_used !=null ,
					measure-site-table : {
						id : $.measure_site_table.id,
						version : $.measure_site_table.version,
						site-record-id : $.measure_site_table.measure_site_record.id,
						site-record-version : $.measure_site_table.measure_site_record.version,
						site-record-version-time : toDateAndTime($.measure_site_table.measure_site_record_version_time),
						computation-method : $.measure_site_table.computation_method,
						(measurement-site-name : $.measure_site_table.measurement_site_name) when $.measure_site_table.measurement_site_name != null,
						measurement-site-number-of-lanes : $.measure_site_table.measurement_site_number_of_lanes,
						measurement-side :  $.measure_site_table.measurement_side,
						measurement-specific-characteristics-list : {
							($.measure_site_table.*measurement_specific_characteristics map {
								measurement-specific-characteristic : {
									measure-type : $.measure_value_type,
									accuracy : $.measurement_specific.accuracy,
									period : $.measurement_specific.period,
									specific-lane : $.measurement_specific.lane,
									(vehicle-characteristics-list : {
										($.*vehicle_characteristics map {
											vehicle_characteristic : {
												vc-code : $.vc_code,
												comparison : $.comparison,
												length : $.length
											}
										})
									}) when $.*vehicle_characteristics != null and $.vehicle_no_characteristics == null,
									index : $.index
								}
							})
						}
					}
				}
			},
			carriageway : $.measure_site_table.measure_site_location.position_extension.carriageway,
			(measurement-equipment-ref : $.measure_site_table.measurement_equipment_reference) when $.measure_site_table.measurement_equipment_reference != null
		} when $.detector_id.id != null otherwise {} } when $.detector_id.id != null otherwise {}) 
		} when payload.detector_si_info_reply.detector_publish != null otherwise {}
)
}
	]]></dw:set-payload>
                </dw:transform-message>
                <flow-ref name="transformToXML" doc:name="transformToXML"/>
                <set-variable variableName="detectorDetails" value="#[payload]" doc:name="Detector Details"/>
                <set-variable variableName="isDetectorsPresent" value="#[xpath3('/*:detectors/*:detector-inventory-item',payload,&quot;NODE&quot;) != null]" doc:name="IsDetectorsPresent"/>

                <set-payload value="#[flowVars.detectorInfoReplyDetails]" mimeType="text/xml" doc:name="Set Payload As DetectorInfoReply"/>
                
                <dw:transform-message metadata:id="e9607521-2677-4f9a-b50d-fdee9d831b10" doc:name="Prepare detectorInventoryMsg Message for FEP">
                    <dw:input-payload doc:sample="sample_data\empty_4.xml"/>
                    <dw:input-variable doc:sample="sample_data\empty_5.xml" variableName="detectorInfoReplayDetails"/>
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/xml encoding = "UTF-8"
%namespace tmdd http://www.tmdd.org/3/messages
%namespace xsi http://www.w3.org/2001/XMLSchema-instance

%var toDateAndTime = (data) -> {
	date: data  as :date as :string {format : "yyyyMMdd"},		
	time: data  as :localdatetime  as :string {format : "HHmmss"}		
}
---
"feps" :{
(payload.detector_si_info_reply.*detector_publish distinctBy ($.fep_id.id)  map {	
		("":{detector-inventory-item @(xsi#type : 'tmdd:DetectorInventoryNDW'): {
			detector-station-inventory-header @(xsi#type : 'tmdd:DeviceInventoryHeaderCharm'): {				
				organization-information : {
					organization-id : p('organization_information.organization_id')
				},				
				(device-id : $.fep_id.id when $.fep_id.id != null otherwise {}),								
				(device-name : $.fep_inventory_attr.name when $.fep_inventory_attr.name != null otherwise "dummy"),			
				(device-description : $.fep_inventory_attr.description when $.fep_inventory_attr.description != null otherwise {}),				
				(scan-on-off : $.fep_inventory_attr.scan_enabled when $.fep_inventory_attr.scan_enabled != null otherwise {}),
				(scan-interval : $.fep_inventory_attr.scan_interval when $.fep_inventory_attr.scan_interval != null otherwise {}),
				protocol : "udp-1.1" when $.fep_inventory_attr.fep_type == "udp" otherwise "fep-partyline",
				(hostname : $.fep_inventory_attr.host when $.fep_inventory_attr.host != null otherwise {}),
				(port : $.fep_inventory_attr.port_number when $.fep_inventory_attr.port_number != null otherwise {}),
				(response-timeout: $.fep_inventory_attr.response_timeout when $.fep_inventory_attr.response_timeout != null otherwise {}),
				(command-timeout : $.fep_inventory_attr.command_timeout when $.fep_inventory_attr.command_timeout != null otherwise {}),
				(data-owner : $.fep_inventory_attr.owner when $.fep_inventory_attr.owner != null otherwise {})
			} ,
			detector-list : {} 			
		} when $.fep_id.id  != null otherwise {}} when $.fep_id.id != null otherwise {})
	  } when payload.detector_si_info_reply.detector_publish != null otherwise {}
)}
	]]></dw:set-payload>
                </dw:transform-message>
                <flow-ref name="transformToXML" doc:name="transformToXML"/>
                <set-variable variableName="fepDetails" value="#[payload]" doc:name="Fep Details"/>
                <set-variable variableName="isFepsPresent" value="#[xpath3('/*:feps/*:detector-inventory-item',payload,&quot;NODE&quot;) != null]" doc:name="IsFepsPresent"/>


                <set-payload value="#[flowVars.detectorInfoReplyDetails]" mimeType="text/xml" doc:name="Set Payload As DetectorInfoReply"/>
                
                <dw:transform-message metadata:id="e9607521-2677-4f9a-b50d-fdee9d831b10" doc:name="Prepare detectorInventoryMsg Message for OUTSTATION">
                    <dw:input-payload doc:sample="sample_data\empty_4.xml"/>
                    <dw:input-variable doc:sample="sample_data\empty_5.xml" variableName="detectorInfoReplayDetails"/>
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/xml encoding = "UTF-8"
%namespace tmdd http://www.tmdd.org/3/messages
%namespace xsi http://www.w3.org/2001/XMLSchema-instance

%var toDateAndTime = (data) -> {
	date: data  as :date as :string {format : "yyyyMMdd"},		
	time: data  as :localdatetime  as :string {format : "HHmmss"}		
}
---
"outstations" : {		
	(payload.detector_si_info_reply.*detector_publish distinctBy ($.outstation_id.id)  map {			
		("":{detector-inventory-item @(xsi#type : 'tmdd:DetectorInventoryNDW'): {
			detector-station-inventory-header @(xsi#type : 'tmdd:DeviceInventoryHeaderCharm'): {				
				organization-information : {
					organization-id : p('organization_information.organization_id')
				},				
				(device-id : $.outstation_id.id when $.outstation_id != null otherwise {}),				
				(device-location : {
					latitude : $.outstation_location_attr.position_wgs84.latitude,
					longitude : $.outstation_location_attr.position_wgs84.longitude
				}) when $.outstation_location_attr != null, 			
				device-name : $.outstation_inventory_attr.name,				
				(device-description : $.outstation_inventory_attr.description when $.outstation_inventory_attr.description != null otherwise {}),			
				scan-on-off : $.outstation_inventory_attr.scan_enabled,
				scan-interval : $.outstation_inventory_attr.scan_interval,
				parent-device-id : $.outstation_inventory_attr.outstation_address.fep_id.id,
				station-line-number : $.outstation_inventory_attr.outstation_address.os_line_number,
				station-line-position : $.outstation_inventory_attr.outstation_address.os_line_position,
				position-bps-code : $.outstation_location_attr.position_bps,
				(data-owner : $.outstation_inventory_attr.owner when $.outstation_inventory_attr.owner != null otherwise {})
			} ,			
			detector-list : {},
			(outstation-configuration : {
				os-version : $.outstation_inventory_attr.os_version,
				detector-stations : $.outstation_inventory_attr.detectorstations,
				detectors : $.outstation_inventory_attr.detectors,
				detectors-speed-flow : $.outstation_inventory_attr.detectors_sf,
				speed-flow-enabled : $.outstation_inventory_attr.sf_enabled,
				msis : $.outstation_inventory_attr.msis,
				base-aid : $.outstation_inventory_attr.base_aid,
				msis-arg : $.outstation_inventory_attr.msis_arg,
				road-code : $.outstation_inventory_attr.outstation_reference.road_code,
				km-reference : $.outstation_inventory_attr.outstation_reference.km_reference
			} ) when $.outstation_inventory_attr != null
		} when $.outstation_id.id != null otherwise {} } when $.outstation_id.id != null otherwise {})
	  } when payload.detector_si_info_reply.detector_publish != null otherwise {}
	) 
}]]></dw:set-payload>
                </dw:transform-message>
                <flow-ref name="transformToXML" doc:name="transformToXML"/>
                <set-variable variableName="outstationDetails" value="#[payload]" doc:name="Outstation Details"/>
                <set-variable variableName="isOutstationssPresent" value="#[xpath3('/*:outstations/*:detector-inventory-item',payload,&quot;NODE&quot;) != null]" doc:name="IsOutstationssPresent"/>
                <choice doc:name="Choice">
                    <when expression="#[flowVars.isDetectorsPresent == false &amp;&amp; flowVars.isFepsPresent == false &amp;&amp; flowVars.isOutstationssPresent == true]">
                        <dw:transform-message metadata:id="9005af17-d727-45aa-8a5b-c2394e56790e" doc:name="Combine Message">
                            <dw:input-payload/>
                            <dw:input-variable mimeType="application/xml" variableName="outstationDetails"/>
                            <dw:input-session-variable variableName="fepDetails"/>
                            <dw:input-session-variable variableName="detectorDetails"/>
                            <dw:input-session-variable variableName="outstationDetails"/>
                            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml encoding = "UTF-8"
%namespace tmdd http://www.tmdd.org/3/messages
%namespace xsi http://www.w3.org/2001/XMLSchema-instance
---
tmdd#detectorInventoryMsg : flowVars.outstationDetails.outstations
]]></dw:set-payload>
                        </dw:transform-message>
                    </when>
                    <when expression="#[flowVars.isDetectorsPresent == true &amp;&amp; flowVars.isFepsPresent == false &amp;&amp; flowVars.isOutstationssPresent == false]">
                        <dw:transform-message metadata:id="1594261e-fd28-42fb-a975-3ec8ce0845e6" doc:name="Transform Message">
                            <dw:input-variable mimeType="application/xml" variableName="detectorDetails"/>
                            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml encoding = "UTF-8"
%namespace tmdd http://www.tmdd.org/3/messages
%namespace xsi http://www.w3.org/2001/XMLSchema-instance
---
tmdd#detectorInventoryMsg : flowVars.detectorDetails.detectors
]]></dw:set-payload>
                        </dw:transform-message>
                    </when>
                    <when expression="#[flowVars.isDetectorsPresent == false &amp;&amp; flowVars.isFepsPresent == true &amp;&amp; flowVars.isOutstationssPresent == false]">
                        <dw:transform-message metadata:id="d91656ed-df8c-4a3e-b06a-0495de3b7db0" doc:name="Transform Message">
                            <dw:input-variable mimeType="application/xml" variableName="fepDetails"/>
                            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml encoding = "UTF-8"
%namespace tmdd http://www.tmdd.org/3/messages
%namespace xsi http://www.w3.org/2001/XMLSchema-instance
---
tmdd#detectorInventoryMsg : flowVars.fepDetails.feps
]]></dw:set-payload>
                        </dw:transform-message>
                    </when>
                    <when expression="#[flowVars.isDetectorsPresent == true &amp;&amp; flowVars.isFepsPresent == false &amp;&amp; flowVars.isOutstationssPresent == true]">
                        <dw:transform-message metadata:id="cf37b70a-a74e-4864-8cac-a94b58354445" doc:name="Transform Message">
                            <dw:input-variable mimeType="application/xml" variableName="outstationDetails"/>
                            <dw:input-variable mimeType="application/xml" variableName="detectorDetails"/>
                            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml encoding = "UTF-8"
%namespace tmdd http://www.tmdd.org/3/messages
%namespace xsi http://www.w3.org/2001/XMLSchema-instance
---
tmdd#detectorInventoryMsg : flowVars.outstationDetails.outstations ++ flowVars.detectorDetails.detectors
]]></dw:set-payload>
                        </dw:transform-message>
                    </when>
                    <when expression="#[flowVars.isDetectorsPresent == false &amp;&amp; flowVars.isFepsPresent == true &amp;&amp; flowVars.isOutstationssPresent == true]">
                        <dw:transform-message metadata:id="0c074af6-b007-4093-bc4f-97dc1947e6f6" doc:name="Transform Message">
                            <dw:input-variable mimeType="application/xml" variableName="outstationDetails"/>
                            <dw:input-variable mimeType="application/xml" variableName="fepDetails"/>
                            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml encoding = "UTF-8"
%namespace tmdd http://www.tmdd.org/3/messages
%namespace xsi http://www.w3.org/2001/XMLSchema-instance
---
tmdd#detectorInventoryMsg : flowVars.outstationDetails.outstations ++ flowVars.fepDetails.feps
]]></dw:set-payload>
                        </dw:transform-message>
                    </when>
                    <when expression="#[flowVars.isDetectorsPresent == true &amp;&amp; flowVars.isFepsPresent == true &amp;&amp; flowVars.isOutstationssPresent == false]">
                        <dw:transform-message metadata:id="464b30de-394a-49dd-95ee-5a34894c128f" doc:name="Transform Message">
                            <dw:input-variable mimeType="application/xml" variableName="fepDetails"/>
                            <dw:input-variable mimeType="application/xml" variableName="detectorDetails"/>
                            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml encoding = "UTF-8"
%namespace tmdd http://www.tmdd.org/3/messages
%namespace xsi http://www.w3.org/2001/XMLSchema-instance
---
tmdd#detectorInventoryMsg : flowVars.detectorDetails.detectors ++ flowVars.fepDetails.feps
]]></dw:set-payload>
                        </dw:transform-message>
                    </when>
                    <when expression="#[flowVars.isDetectorsPresent == true &amp;&amp; flowVars.isFepsPresent == true &amp;&amp; flowVars.isOutstationssPresent == true]">
                        <dw:transform-message metadata:id="3f4be3f6-0976-4c41-b3e5-3a3012db3a2a" doc:name="Transform Message">
                            <dw:input-variable mimeType="application/xml" variableName="outstationDetails"/>
                            <dw:input-variable mimeType="application/xml" variableName="detectorDetails"/>
                            <dw:input-variable mimeType="application/xml" variableName="fepDetails"/>
                            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml encoding = "UTF-8"
%namespace tmdd http://www.tmdd.org/3/messages
%namespace xsi http://www.w3.org/2001/XMLSchema-instance
---
tmdd#detectorInventoryMsg : flowVars.outstationDetails.outstations ++ flowVars.detectorDetails.detectors ++ flowVars.fepDetails.feps
]]></dw:set-payload>
                        </dw:transform-message>
                    </when>
                    <otherwise>
                        <logger message="============ DEFAULT ==============" level="DEBUG" category="dynac-interface-app" doc:name="Logger"/>
                    </otherwise>
                </choice>

            </when>
            <otherwise>
                <logger message="Detector Info Reply does not contains detector publish details." level="DEBUG" category="dynac-interface-app" doc:name="Logger"/>
                <dw:transform-message doc:name="Prepare detectorInventoryMsg Message for Empty reply">
                    <dw:input-payload doc:sample="sample_data\empty_3.xml"/>
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/xml encoding = "UTF-8"
%namespace tmdd http://www.tmdd.org/3/messages
%namespace xsi http://www.w3.org/2001/XMLSchema-instance

%var toDateAndTime = (data) -> {
	date: data  as :date as :string {format : "yyyyMMdd"},		
	time: data  as :localdatetime  as :string {format : "HHmmss"}		
}
---
tmdd#detectorInventoryMsg : {		
	detector-inventory-item @(xsi#type : 'tmdd:DetectorInventoryNDW'):  {
					detector-station-inventory-header @(xsi#type : 'tmdd:DeviceInventoryHeaderCharm'): {
						organization-information : {
							organization-id : p('organization_information.organization_id')
						},
						device-id : 0,
						device-name : "dummy"								
					},
						detector-list : {
							detector @(xsi#type : "tmdd:DetectorInventoryDetailsCharm") : {
								detector-inventory-header @(xsi#type : "tmdd:DeviceInventoryHeaderCharm") : {
									organization-information : {
										organization-id : p('organization_information.organization_id')
										},
									device-id : 0,
									device-name : "dummy"
									},
									detector-type : "unknown"
								}
						}
						                 		           		                 							
				}
}]]></dw:set-payload>
                </dw:transform-message>
            </otherwise>
        </choice>
        <byte-array-to-string-transformer doc:name="Byte Array to String"/>

	</sub-flow>
	
    <sub-flow name="detector-info-request-data">
        <logger message="=== Detector-si info request data incoming ===" level="INFO" category="dynac-interface-app" doc:name="Logger"/>
        <mulexml:xslt-transformer xsl-file="xslt/detector/transformToInfoRequestDataCDM.xsl" maxIdleTransformers="2" maxActiveTransformers="5" doc:name="XSLT">
            <mulexml:context-property key="current_time_in_millis" value="#[System.currentTimeMillis()]"/>
            <mulexml:context-property key="message_uuid" value="#[function:uuid]"/>
        </mulexml:xslt-transformer>
        <flow-ref name="outbound_cdm_backbone_request_response" doc:name="outbound_cdm_backbone_request_response"/>
        <expression-filter expression="#[! (payload.contains('faultcode'))]" doc:name="Expression"/>

        <mulexml:jaxb-xml-to-object-transformer jaxbContext-ref="cdm" doc:name="XML to JAXB Object"/>
        <invoke object-ref="cdmDetectorToDetectorData" method="handle" methodArguments="#[payload]" methodArgumentTypes="com.cgi.charm.cdm.si.detector.DetectorSiInfoReply" name="PrepareDetectorDataMsgMessage" />

        <mulexml:jaxb-object-to-xml-transformer returnClass="java.lang.String" jaxbContext-ref="cdm" doc:name="JAXB Object to XML"/>
    </sub-flow>
    
	<sub-flow name="detector-status-subscription">
        <logger message="=== Detector-si status subscription incoming ===" level="INFO" category="dynac-interface-app" doc:name="Logger"/>
		<flow-ref name="transformToXML" doc:name="transformToXML"/>
        <flow-ref name="generateUUID" doc:name="generateUUID"/>
        <dw:transform-message doc:name="Prepare detector_status_subscription Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml encoding="UTF-8"
%var timeZone = now as :string {format: "yyyy-MM-dd"} ++ "T" ++ now as :string {format: "hh:mm:ss"} ++ "Z"
---
detector_si_status_subscription @(xmlns: "http://detector.si.cdm.charm.cgi.com", version:"1.0.0") : {	
	meta :{
		message_id : {
			uuid : flowVars.uuid
		},
		message_create_date : timeZone
	},
	
	subscription_config : {
		subscription_id : {
			uuid : payload.deviceInformationSubscriptionMsg.c2cMsgAdmin.subscriptionID
		},
		
		subscription_attr : {
			subscription_name : payload.deviceInformationSubscriptionMsg.c2cMsgAdmin.subscriptionName,
			subscription_type: 'status'
		},
		
		all_feps :  true,
		
		all_outstations : true,
		
		(
			all_detectors : {
				(payload.deviceInformationSubscriptionMsg.device-filter.device-id-list.*device-id map {
								detector_spec : {
									detector_id : {
										id : $.device-id
									}
								}
							})
			} when payload.deviceInformationSubscriptionMsg.device-filter.device-id-list.*device-id != null
			  otherwise true
		)	
	}
}]]></dw:set-payload>
        </dw:transform-message>
        <byte-array-to-string-transformer doc:name="Byte Array to String"/>		
		<flow-ref name="outbound_cdm_backbone_oneway" doc:name="outbound_cdm_backbone_oneway"/>		
		<static-component>
			<return-data file="static_messages/c2cMessageReceipt_ok.xml"/>
		</static-component>
	</sub-flow>
	
    <sub-flow name="detector-data-subscription">
        <logger message="=== Detector-si data subscription incoming ===" level="INFO" category="dynac-interface-app" doc:name="Logger"/>
        <flow-ref name="transformToXML" doc:name="transformToXML"/>
        <flow-ref name="generateUUID" doc:name="generateUUID"/>
        <dw:transform-message doc:name="Prepare detector_data_subscription Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml encoding="UTF-8"
%var timeZone = now as :string {format: "yyyy-MM-dd"} ++ "T" ++ now as :string {format: "hh:mm:ss"} ++ "Z"
---
detector_si_data_subscription @(xmlns: "http://detector.si.cdm.charm.cgi.com", version:"1.0.0") : {	
	meta :{
		message_id : {
			uuid : flowVars.uuid
		},
		message_create_date : timeZone
	},
	
	subscription_config : {
		subscription_id : {
			uuid : payload.deviceInformationSubscriptionMsg.c2cMsgAdmin.subscriptionID
		},
		
		subscription_attr : {
			subscription_name : payload.deviceInformationSubscriptionMsg.c2cMsgAdmin.subscriptionName,
			subscription_type: 'data'
		},
		
		all_feps :  true,
		
		all_outstations : true,
		
		(
			all_detectors : {
				(payload.deviceInformationSubscriptionMsg.device-filter.device-id-list.*device-id map {
								detector_spec : {
									detector_id : {
										id : $.device-id
									}
								}
							})
			} when payload.deviceInformationSubscriptionMsg.device-filter.device-id-list.*device-id != null
			  otherwise true
		)	
	}
}]]></dw:set-payload>
        </dw:transform-message>
        <byte-array-to-string-transformer doc:name="Byte Array to String"/>		
		<flow-ref name="outbound_cdm_backbone_oneway" doc:name="outbound_cdm_backbone_oneway"/>		
		<static-component>
			<return-data file="static_messages/c2cMessageReceipt_ok.xml"/>
		</static-component>
    </sub-flow>

	<sub-flow name="detector-status-publish">
        <flow-ref name="transformToXML" doc:name="transformToXML"/>
        <dw:transform-message doc:name="Prepare detectorStatusUpdateMsg Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml encoding="UTF-8"
%var timeZone = now as :string {format: "yyyy-MM-dd"} ++ "T" ++ now as :string {format: "hh:mm:ss"} ++ "Z"
%namespace tmdd http://www.tmdd.org/3/messages
%namespace xsi http://www.w3.org/2001/XMLSchema-instance

%var toDateAndTime = (data) -> {
	date: data  as :date as :string {format : "yyyyMMdd"},		
	time: data  as :localdatetime  as :string {format : "HHmmss"}		
}
---
tmdd#detectorStatusUpdateMsg : {	
	
	c2cMsgAdmin: {
		
		subscriptionID : payload.detector_si_status_publish.subscription_id.uuid
		},			
				
		((payload.detector_si_status_publish.*detector_publish map {
			
			(detector-status-item @(xsi#type : 'tmdd:DetectorStatusCharm') : {
			 	detector-station-status-header @(xsi#type : 'tmdd:DeviceStatusHeaderCharm') : {
			 		organization-information : {
			 			organization-id : p('organization_information.organization_id')
			 		},			 		
			 		device-id : $.fep_id.id,			 		
			 		device-status : "unknown",
			 		("":{last-comm-time : toDateAndTime($.fep_status_attr.last_status_update)} when $.fep_status_attr.last_status_update != null otherwise {})
			 	},
			 	detector-list : {
			 		detector  @(xsi#type : 'tmdd:DetectorStatusDetailsCharm'): {
			 			detector-status-header  @(xsi#type : 'tmdd:DeviceStatusHeaderCharm') : {
			 				organization-information : {
			 					organization-id : p('organization_information.organization_id')
			 				},			 				
			 				device-id : $.fep_id.id,
			 				device-status : "unknown"
			 			}			 			
			 		}
			 	},			
			 	(device-mode : $.fep_status_attr.fep_mode when $.fep_status_attr.fep_mode != null otherwise {})					
			 }) when $.fep_id != null,
			 
			 (detector-status-item @(xsi#type : 'tmdd:DetectorStatusCharm') : {
			 	detector-station-status-header @(xsi#type : 'tmdd:DeviceStatusHeaderCharm') : {
			 		organization-information : {
			 			organization-id : p('organization_information.organization_id')
			 		},			 		
			 		device-id : $.outstation_id.id,			 		
			 		(device-status : "on") when $.outstation_status_attr.comm_state == "online",
			 		(device-status : "marginal") when $.outstation_status_attr.comm_state == "degraded",
			 		(device-status : "off") when $.outstation_status_attr.comm_state == "offline",
			 		(device-status : "unavailable") when $.outstation_status_attr.comm_state == "disabled",
			 		(device-status : "unknown") when $.outstation_status_attr.comm_state == "unknown" or $.outstation_status_attr.comm_state == null,
			 		("":{last-comm-time : toDateAndTime($.outstation_status_attr.last_status_update)} when $.outstation_status_attr.last_status_update != null otherwise {})
			 	},
			 	detector-list : {
			 		detector  @(xsi#type : 'tmdd:DetectorStatusDetailsCharm'): {
			 			detector-status-header  @(xsi#type : 'tmdd:DeviceStatusHeaderCharm') : {
			 				organization-information : {
			 					organization-id : p('organization_information.organization_id')
			 				},			 				
			 				device-id : $.outstation_id.id,
			 				device-status : "unknown"
			 			}			 			
			 		}
			 	},	
			 	
			 	( $.outstation_status_attr.*traffic_flow map { 
			 	traffic-flow : {
			 		(traffic-flow-number : $.traffic_flow_number),
			 		(aid-active : $.aid_active),
			 		(aid-recommendation : $.aid_recommendation when $.aid_recommendation != null otherwise {})
			 	} }),	
			 	
			 	(local-overide : {
			 		(channel1 : $.outstation_status_attr.local_override.channel1 when $.outstation_status_attr.local_override.channel1 != null otherwise {}),
			 		(channel2 : $.outstation_status_attr.local_override.channel2 when $.outstation_status_attr.local_override.channel1 != null otherwise {}), 
			 		(channel3 : $.outstation_status_attr.local_override.channel3 when $.outstation_status_attr.local_override.channel1 != null otherwise {}),
			 		(channel4 : $.outstation_status_attr.local_override.channel4 when $.outstation_status_attr.local_override.channel1 != null otherwise {}) 
			 	} ) when $.outstation_status_attr.local_override != null,	
			 	
			 	(statistics : {
			 		statistics-updated : $.outstation_statistics_attr.statistics_updated,
			 		count1 : $.outstation_statistics_attr.f1_count,
			 		count2 : $.outstation_statistics_attr.f2_count,
			 		count3 : $.outstation_statistics_attr.f3_count
			 	})when $.outstation_statistics_attr != null,
			 	
			 	(device-mode : $.outstation_status_attr.outstation_mode when $.outstation_status_attr.outstation_mode != null otherwise {}),
			 	(aux-power-available : $.outstation_status_attr.aux_power_available when $.outstation_status_attr.aux_power_available != null otherwise {}),
			 	
			 	(power-supply : 'main power'  when $.outstation_status_attr.power_supply == 'main_power' otherwise {}),
			 	(power-supply : 'backup power' when $.outstation_status_attr.power_supply == 'backup_power' otherwise {}),
			 	
			 	(cold-start : $.outstation_status_attr.report_cold_start when $.outstation_status_attr.report_cold_start != null otherwise {}),
			 	(fatal-error : $.outstation_status_attr.fatal_error when $.outstation_status_attr.fatal_error != null otherwise {}),
			 	(maintenance-code : $.outstation_status_attr.maintenance_code when $.outstation_status_attr.maintenance_code != null otherwise {}),			 	
			 	(aid-override : $.outstation_status_attr.aid_override when $.outstation_status_attr.aid_override != null otherwise {}),			 	
			 	(dynamic-max-speed : $.outstation_status_attr.dynamic_max_speed when $.outstation_status_attr.dynamic_max_speed != null otherwise {}),
			 	(measure-number : $.outstation_status_attr.measure_number when $.outstation_status_attr.measure_number != null otherwise {})			 	
			 }) when $.outstation_id != null,
			 
			 (detector-status-item @(xsi#type : 'tmdd:DetectorStatusCharm') : {
			 	detector-station-status-header @(xsi#type : 'tmdd:DeviceStatusHeaderCharm') : {
			 		organization-information : {
			 			organization-id : p('organization_information.organization_id')
			 		},			 		
			 		device-id : $.detector_id.id,
			 		
			 		(device-status : 'on'  when $.detector_status_attr.detector_state == 'ok' otherwise {}),
			 		(device-status : 'off'  when $.detector_status_attr.detector_state == 'nok' otherwise {}),
			 		(device-status : 'marginal'  when $.detector_status_attr.detector_state == 'degraded' otherwise {}),
			 		(device-status : 'unknown'  when $.detector_status_attr.detector_state == 'unreliable' otherwise {}),		 		
			 		(device-status : 'unknown'  when $.detector_status_attr.detector_state == null otherwise {}),
			 		
			 		("":{last-comm-time : toDateAndTime($.detector_status_attr.last_status_update)} when $.detector_status_attr.last_status_update != null otherwise {})
			 	},
			 	detector-list : {
			 		detector  @(xsi#type : 'tmdd:DetectorStatusDetailsCharm'): {
			 			detector-status-header  @(xsi#type : 'tmdd:DeviceStatusHeaderCharm') : {
			 				organization-information : {
			 					organization-id : p('organization_information.organization_id')
			 				},			 				
			 				device-id : $.detector_id.id,
			 				device-status : "unknown"
			 			}			 			
			 		}
			 	},			
			 	(device-mode : $.fep_status_attr.fep_mode when $.fep_status_attr.fep_mode != null otherwise {})					
			 }) when $.detector_id != null
			 
		})  when payload.detector_si_status_publish.*detector_publish != null otherwise {})
}]]></dw:set-payload>
        </dw:transform-message>
		<flow-ref name="ntcip_client" doc:name="ntcip_client"/>
	</sub-flow>

	<sub-flow name="detector-data-publish">
        <logger message="=== Detector-si data publish outgoing ===" level="INFO" category="dynac-interface-app" doc:name="Logger"/>
        <mulexml:jaxb-xml-to-object-transformer jaxbContext-ref="cdm" doc:name="XML to JAXB Object"/>
        <invoke object-ref="cdmDetectorToDataPublish" method="handle" methodArguments="#[payload]" methodArgumentTypes="com.cgi.charm.cdm.si.detector.DetectorSiDataPublish" name="CdmDetectorToDataPublish" />
        <mulexml:jaxb-object-to-xml-transformer returnClass="java.lang.String" jaxbContext-ref="cdm" doc:name="JAXB Object to XML"/>
        <flow-ref name="ntcip_client" doc:name="ntcip_client"/>
    </sub-flow>
	
<sub-flow name="detector-control-request">
    <logger message="=== Detector-si control request incoming ===" level="INFO" category="dynac-interface-app" doc:name="Logger"/>
        <flow-ref name="transformToXML" doc:name="transformToXML"/>
        <flow-ref name="generateUUID" doc:name="generateUUID"/>

        <dw:transform-message doc:name="Prepare detector_control_request message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml encoding = "UTF-8"
%var timeZone = now as :string {format: "yyyy-MM-dd"} ++ "T" ++ now as :string {format: "hh:mm:ss"} ++ "Z"
%var dateTimeToTimeStamp = (data1, data2) ->  data1[0..3] ++ "-" ++ data1[4..5] ++ "-" ++ data1[6..7] ++ "T" ++  data2[0..1] ++  ":" ++  data2[2..3] ++  ":" ++  data2[4..5] ++ "Z"
---
detector_si_control_request @(xmlns: "http://detector.si.cdm.charm.cgi.com", version:"1.0.0"):{
	meta :{
		message_id:{
			uuid: flowVars.uuid
		},
		message_create_date: timeZone
	},
	control:{
		
		fep_control:{
			fep_id:{
				id: payload.detectorControlRequestMsg.device-control-request-header.device-id
			},
			fep_control_attr: {
				control_timestamp: dateTimeToTimeStamp(payload.detectorControlRequestMsg.device-control-request-header.command-request-time.date,
						payload.detectorControlRequestMsg.device-control-request-header.command-request-time.time),
				fep_mode: payload.detectorControlRequestMsg.detector-mode
			}
		}  
	} when payload.detectorControlRequestMsg.detector-mode == "startup" or payload.detectorControlRequestMsg.detector-mode == "shutdown" otherwise ({
					
		outstation_control: {
			outstation_id: {
				id: payload.detectorControlRequestMsg.device-control-request-header.device-id
			},
			outstation_control_attr: {
				control_timestamp: dateTimeToTimeStamp(payload.detectorControlRequestMsg.device-control-request-header.command-request-time.date,
						payload.detectorControlRequestMsg.device-control-request-header.command-request-time.time),
				os_mode: payload.detectorControlRequestMsg.detector-mode,
				dim_state: payload.detectorControlRequestMsg.dim-state,
				(dynamic_max_speed : payload.detectorControlRequestMsg.dynamic-max-speed when payload.detectorControlRequestMsg.dynamic-max-speed != null otherwise {}),
				(measure_number : payload.detectorControlRequestMsg.measure-number when payload.detectorControlRequestMsg.measure-number != null otherwise {})
			}
		}} when payload.detectorControlRequestMsg.detector-mode == "none" or payload.detectorControlRequestMsg.detector-mode == "online" or
		payload.detectorControlRequestMsg.detector-mode == "local" or payload.detectorControlRequestMsg.detector-mode == "idle" or
		payload.detectorControlRequestMsg.detector-mode == "forced_local" or payload.detectorControlRequestMsg.detector-mode == "forced_idle" otherwise ({
			detector_control: {
				detector_id: {
					id: payload.detectorControlRequestMsg.device-control-request-header.device-id
				},
				detector_control_attr: {
					control_timestamp: dateTimeToTimeStamp(payload.detectorControlRequestMsg.device-control-request-header.command-request-time.date,
						payload.detectorControlRequestMsg.device-control-request-header.command-request-time.time),
					(detector_state_legend : payload.detectorControlRequestMsg.state.legend) when payload.detectorControlRequestMsg.state.legend != null,
					(detector_state_opa : payload.detectorControlRequestMsg.state.opa)when payload.detectorControlRequestMsg.state.opa != null 
				}
                        	
			}
		})
		)
}]]></dw:set-payload>
        </dw:transform-message>

        <byte-array-to-string-transformer doc:name="Byte Array to String"/>

        <flow-ref name="outbound_cdm_backbone_request_response" doc:name="outbound_cdm_backbone_request_response"/>
        <flow-ref name="transformToXML" doc:name="transformToXML"/>
        <dw:transform-message doc:name="Prepare deviceControlResponseMsg">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml encoding = "UTF-8"
%namespace tmdd http://www.tmdd.org/3/messages
%namespace xsi http://www.w3.org/2001/XMLSchema-instance
---
tmdd#deviceControlResponseMsg @(xsi#type : "tmdd:DeviceControlResponseCharm"): {
	organization-information: {
		organization-id: "RWS"
	},
	device-id: 
	payload.detector_si_control_reply.control_mutations.control.fep_control.fep_id.id when  payload.detector_si_control_reply.control_mutations.control.fep_control != null
		otherwise payload.detector_si_control_reply.control_mutations.control.outstation_control.outstation_id.id when payload.detector_si_control_reply.control_mutations.control.outstation_control != null
		otherwise payload.detector_si_control_reply.control_mutations.control.detector_control.detector_id.id  when payload.detector_si_control_reply.control_mutations.control.detector_control != null
		otherwise 0,
	request-id: 1,
	request-status: "requested changes completed" when payload.detector_si_control_reply.control_mutations.processed == "true"
		otherwise "request rejected invalid command parameters",
	comments : "comments"
}]]></dw:set-payload>
        </dw:transform-message>
        <byte-array-to-string-transformer doc:name="Byte Array to String"/>

    </sub-flow>
</mule>