<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw"
	xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd">
<sub-flow name="prism-inventory-subscription">
	<logger message="=== Prism inventory subscription outgoing ===" level="INFO" category="dynac-interface-app" doc:name="Logger"/>
	<flow-ref name="transformToXML" doc:name="transformToXML"/>
        <dw:transform-message doc:name="Prepare dMSInventorySubscriptionMsg Message">
            <dw:input-payload/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml encoding="UTF-8"
%namespace tmdd http://www.tmdd.org/3/messages
---
tmdd#dMSInventorySubscriptionMsg: {
	authentication: {
		user-id: p('user_id'),
		password: p('password')
	},
	
	organization-information : {
		organization-id : p('organization_information.organization_id'),
		(organization-function : payload.prism_inventory_subscription.subscription_config.owner when payload.prism_inventory_subscription.subscription_config.owner != null otherwise {})
	},
	
	device-type : 'cms sign',
	
	device-information-type: 'device inventory',
	
	(
	device-filter : {
				device-id-list : {
					(payload.prism_inventory_subscription.subscription_config.*prism_spec  map {		
						device-id  : $.prism_id.id
					})
				}
		}
	) when payload.prism_inventory_subscription.subscription_config.*prism_spec != null,	
	
	c2cMsgAdmin: {
		returnAddress: p('dynac_interface.return_address'),
		subscriptionAction: {
			subscriptionAction-item: 'newSubscription'
		},
		subscriptionType: {
			subscriptionType-item: 'onChange'
		},
		subscriptionID: payload.prism_inventory_subscription.subscription_config.subscription_id.uuid,
		subscriptionName: payload.prism_inventory_subscription.subscription_config.subscription_attr.subscription_name,
		subscriptionFrequency: 1
	}
}]]></dw:set-payload>
        </dw:transform-message>

		<flow-ref name="ntcip_client" doc:name="ntcip_client" />
	</sub-flow>
	
	<sub-flow name="prism-inventory-subscription-NTCIP-To-CDM">
        <flow-ref name="transformToXML" doc:name="transformToXML"/>
        <flow-ref name="generateUUID" doc:name="generateUUID"/>
        <dw:transform-message doc:name="Prepare prism_inventory_subscription Message">
            <dw:input-payload/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml encoding="UTF-8"
%var timeZone = now as :string {format: "yyyy-MM-dd"} ++ "T" ++ now as :string {format: "hh:mm:ss"} ++ "Z"
---
prism_inventory_subscription @(xmlns: "http://prism.cdm.charm.cgi.com", version:"1.0.0") : {	
	
	meta: {
		message_id: { 
			uuid : flowVars.uuid
		},
		message_create_date: timeZone 
	},
	
	subscription_config : {
		subscription_id : {
			uuid : payload.dMSInventorySubscriptionMsg.c2cMsgAdmin.subscriptionID
		},
		
		subscription_attr : {
			subscription_name : payload.dMSInventorySubscriptionMsg.c2cMsgAdmin.subscriptionName,
			subscription_type : 'inventory'
		},
		
		 
		(
			all_prisms : {
				(payload.dMSInventorySubscriptionMsg.device-filter.device-id-list.*device-id map {
								prism_spec : {
									prism_id : {
										id : $.device-id
									}
								}
							})
			} when payload.dMSInventorySubscriptionMsg.device-filter.device-id-list.*device-id != null
			  otherwise true
		),
		
		(owner :  payload.dMSInventorySubscriptionMsg.organization-information.organization-function when payload.dMSInventorySubscriptionMsg.organization-information.organization-function != null otherwise {})	
	}
}]]></dw:set-payload>
        </dw:transform-message>

        <byte-array-to-string-transformer doc:name="Byte Array to String"/>
		<flow-ref name="outbound_cdm_backbone_oneway" doc:name="outbound_cdm_backbone_oneway" />

		<static-component>
			<return-data file="static_messages/c2cMessageReceipt_ok.xml" />
		</static-component>
	</sub-flow>
	
	<sub-flow name="prism-inventory-publish">
		<logger message="=== Prism inventory publish incoming ===" level="INFO" category="dynac-interface-app" doc:name="Logger"/>
        <flow-ref name="transformToXML" doc:name="transformToXML"/>
        <flow-ref name="generateUUID" doc:name="generateUUID"/>
        <dw:transform-message doc:name="Prepare prism_inventory_publish Message">
            <dw:input-payload/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml encoding="UTF-8"
%var timeZone = now as :string {format: "yyyy-MM-dd"} ++ "T" ++ now as :string {format: "hh:mm:ss"} ++ "Z"
---
prism_inventory_publish @(xmlns: "http://prism.cdm.charm.cgi.com", version:"1.0.0") : {	
	
	meta: {
		message_id: { 
			uuid : flowVars.uuid
		},
		message_create_date: timeZone 
	},
	
	subscription_id: {
		uuid : payload.dMSInventoryUpdateMsg.c2cMsgAdmin.subscriptionID
	},
	
	inventory_config: {
			full_sync : true when payload.dMSInventoryUpdateMsg.c2cMsgAdmin.informationalText == "FULLSYNC"
			otherwise false,
		
			inventory_id : {
				uuid : payload.dMSInventoryUpdateMsg.c2cMsgAdmin.subscriptionID
			},
		
			(payload.dMSInventoryUpdateMsg.*dms-inventory-item map {
				prism_inventory : {
					action : $.device-inventory-header.inventory-action,
					prism_id : {
						id : $.device-inventory-header.device-id
						},
					prism_inventory_attr : {
						name : $.device-inventory-header.device-name,
						description : $.device-inventory-header.device-description,
						scan_enabled : $.device-inventory-header.scan-on-off,
						scan_interval : $.device-inventory-header.scan-interval,
						prism_type_id :  {
							id : $.prism-type-id
						},
						fep_id : {
							id : $.device-inventory-header.parent-device-id2
						},
						outstation_id : {
							id : $.device-inventory-header.parent-device-id
						},
						os_line_number : $.device-inventory-header.station-line-number,
						os_line_position : $.device-inventory-header.station-line-position,
						
						identifier : $.device-inventory-header.fep-lines,
						
						(owner : $.device-inventory-header.data-owner when $.device-inventory-header.data-owner != null otherwise {})
					},
					prism_location_attr : {
						position_bps : $.device-inventory-header.position-bps-code,
						position_wgs84 : {
							latitude : $.device-inventory-header.device-location.latitude,
							longitude : $.device-inventory-header.device-location.longitude
						}
					}
				}				
			})
	}
}]]></dw:set-payload>
        </dw:transform-message>
        <byte-array-to-string-transformer doc:name="Byte Array to String"/>
		<flow-ref name="outbound_cdm_backbone_oneway" doc:name="outbound_cdm_backbone_oneway" />
		<static-component>
			<return-data file="static_messages/c2cMessageReceipt_ok.xml" />
		</static-component>
	</sub-flow>
	
	<sub-flow name="prism-library-publish">
		<logger message="=== Prism library publish incoming ===" level="INFO" category="dynac-interface-app" doc:name="Logger"/>
   		  <mulexml:xslt-transformer xsl-file="xslt/prism/transformToPrismLibraryPublishCDM.xsl" doc:name="transform to CDM inventory publish" returnClass="java.lang.String">
			<mulexml:context-property key="current_time_in_millis" value="#[System.currentTimeMillis()]"/>
			<mulexml:context-property key="message_uuid" value="#[function:uuid]"/>
		</mulexml:xslt-transformer>
        <flow-ref name="outbound_cdm_backbone_oneway" doc:name="outbound_cdm_backbone_oneway"/>
        <parse-template location="static_messages/c2cMessageReceipt_ok.xml" doc:name="static c2c response" name="c2c_response1"/> 	 
	</sub-flow>
	
	<sub-flow name="prism-inventory-publish_nina_variant">
		<logger message="=== Prism inventory publish nina outgoing ===" level="INFO" category="dynac-interface-app" doc:name="Logger"/>
		<flow-ref name="transformToXML" doc:name="transformToXML"/>
        <dw:transform-message doc:name="Prepare dMSInventoryUpdateMsg Message">
            <dw:input-payload/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml encoding="UTF-8"
%namespace tmdd http://www.tmdd.org/3/messages
%namespace xsi http://www.w3.org/2001/XMLSchema-instance

---
tmdd#dMSInventoryUpdateMsg: {	
	c2cMsgAdmin: {
		(informationalText: "FULLSYNC" when payload.prism_inventory_publish.inventory_config.full_sync == "true"
							otherwise {}),
		subscriptionID: payload.prism_inventory_publish.subscription_id.uuid
	},
	
	((payload.prism_inventory_publish.inventory_config.*prism_inventory map {
			dms-inventory-item @(xsi#type : 'tmdd:DMSInventoryCharm') : {
				device-inventory-header @(xsi#type : 'tmdd:DeviceInventoryHeaderCharm'): {
					
					organization-information : {
						organization-id : p('organization_information.organization_id')
					},
					
					device-id : $.prism_id.id,
					
					device-location : {
						latitude : $.prism_location_attr.position_wgs84.latitude,
						longitude : $.prism_location_attr.position_wgs84.longitude
					},
					
					device-name : $.prism_inventory_attr.name,
					
					(device-description : $.prism_inventory_attr.description when $.prism_inventory_attr.description != null otherwise {}),
					
					device-type : "cms sign",
					
					scan-on-off : $.prism_inventory_attr.scan_enabled,
					
					scan-interval : $.prism_inventory_attr.scan_interval,
					
					inventory-action : $.action,
					
					parent-device-id : $.prism_inventory_attr.outstation_id.id,
					
					parent-device-id2 : $.prism_inventory_attr.fep_id.id,
					
					station-line-number : $.prism_inventory_attr.os_line_number,
					
					station-line-position : $.prism_inventory_attr.os_line_position,
					
					position-bps-code : $.prism_location_attr.position_bps,
					
					(data-owner : $.prism_inventory_attr.owner when $.prism_inventory_attr.owner != null otherwise {})
				},
				dms-sign-type : "variable message sign VMS",
				
				prism-type-id : $.prism_inventory_attr.prism_type_id.id					
			}
	}) when payload.prism_inventory_publish.inventory_config.*prism_inventory != null otherwise {} )
}]]></dw:set-payload>
        </dw:transform-message>
        <flow-ref name="ntcip_client" doc:name="ntcip_client"/>

	</sub-flow>
	
	<sub-flow name="prism-status-subscription">
		<logger message="=== Prism status subscription outgoing ===" level="INFO" category="dynac-interface-app" doc:name="Logger"/>
        <flow-ref name="transformToXML" doc:name="transformToXML"/>
        <flow-ref name="generateUUID" doc:name="generateUUID"/>
        <dw:transform-message doc:name="Prepare prism_status_subscription Message">
            <dw:input-payload/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml encoding="UTF-8"
%var timeZone = now as :string {format: "yyyy-MM-dd"} ++ "T" ++ now as :string {format: "hh:mm:ss"} ++ "Z"
---
prism_status_subscription @(xmlns: "http://prism.cdm.charm.cgi.com", version:"1.0.0") : {	
	meta :{
		message_id : {
			uuid : flowVars.uuid
		},
		message_create_date : timeZone
	},
	
	subscription_config : {
		subscription_id : {
			uuid : payload.deviceInformationSubscriptionMsg.c2cMsgAdmin.subscriptionID
		},
		
		subscription_attr : {
			subscription_name : payload.deviceInformationSubscriptionMsg.c2cMsgAdmin.subscriptionName,
			subscription_type : 'status'
		},
		
		(((payload.deviceInformationSubscriptionMsg.device-filter.device-id-list.*device-id map {
								prism_spec : {
									prism_id : {
										id : $.device-id
									}
								}
							}
							 )
					when payload.deviceInformationSubscriptionMsg.device-filter.device-id-list.*device-id != null otherwise {
				all_prisms : true 
				
					}
			
		)
		when payload.deviceInformationSubscriptionMsg.c2cMsgAdmin.subscriptionAction.subscriptionAction-item != "cancelSubscription" otherwise {} 
		)
	}
}]]></dw:set-payload>
        </dw:transform-message>
        <byte-array-to-string-transformer doc:name="Byte Array to String"/>


		<flow-ref name="outbound_cdm_backbone_oneway" doc:name="outbound_cdm_backbone_oneway" />

		<static-component>
			<return-data file="static_messages/c2cMessageReceipt_ok.xml" />
		</static-component>
	</sub-flow>

	<sub-flow name="prism-status-publish">
		<logger message="=== Prism status publish outgoing ===" level="INFO" category="dynac-interface-app" doc:name="Logger"/>
		<flow-ref name="transformToXML" doc:name="transformToXML" />
        <dw:transform-message doc:name="Prepare dMSStatusUpdateMsg Message">
            <dw:input-payload/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml encoding="UTF-8"
%namespace tmdd http://www.tmdd.org/3/messages
%namespace xsi http://www.w3.org/2001/XMLSchema-instance

%var toDateAndTime = (data) -> {
	date: data  as :date as :string {format : "yyyyMMdd"},		
	time: data  as :localdatetime  as :string {format : "HHmmss"}		
}
---
tmdd#dMSStatusUpdateMsg: {	
	c2cMsgAdmin: {
		subscriptionID: payload.prism_status_publish.subscription_id.uuid
	},
	
	((payload.prism_status_publish.*prism_publish map {
			dms-status-item @(xsi#type : 'tmdd:DMSDeviceStatusCharm') : {
				device-status-header @(xsi#type : 'tmdd:DeviceStatusHeaderCharm'): {
					
					organization-information : {
						organization-id : p('organization_information.organization_id')
					},
					
					device-id : $.prism_id.id,
					
					(device-status : 'on' when $.prism_status_attr.operating_mode == "ok" otherwise {}),				
					(device-status : 'marginal' when $.prism_status_attr.operating_mode == "downgraded" otherwise {}),	
					(device-status : 'failed' when $.prism_status_attr.operating_mode == "defect" otherwise {}),	
										
					last-comm-time : toDateAndTime($.prism_status_attr.last_status_update),
							
					device-type : "cms sign"					
						
				},
				
				current-message : $.prism_status_attr.prism_state_mnemonic,
				
				message-number : $.prism_status_attr.prism_state_nr,
									
				(sign-test : 'unknown' when $.prism_status_attr.prism_test == "Unknown" otherwise {}),
				(sign-test : 'on' when $.prism_status_attr.prism_test == "OK" otherwise {}),
				(sign-test : 'failed' when $.prism_status_attr.prism_test == "not OK" otherwise {})					
									
			}
	}) when payload.prism_status_publish.*prism_publish != null otherwise {} )
}]]></dw:set-payload>
        </dw:transform-message>
        <flow-ref name="ntcip_client" doc:name="ntcip_client"/>
	</sub-flow>
	
	<sub-flow name="prism-status-publish_nina_variant">
		<logger message="=== Prism status publish nina incoming ===" level="INFO" category="dynac-interface-app" doc:name="Logger"/>
        <flow-ref name="transformToXML" doc:name="transformToXML"/>

        <dw:transform-message doc:name="Prepare dMSInventoryUpdateMsg Message">
            <dw:input-payload/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/xml encoding="UTF-8"
%namespace tmdd http://www.tmdd.org/3/messages
%namespace xsi http://www.w3.org/2001/XMLSchema-instance

%var toDateAndTime = (data) -> {
	date: data  as :date as :string {format : "yyyyMMdd"},		
	time: data  as :localdatetime  as :string {format : "HHmmss"}		
}
---
tmdd#dMSStatusUpdateMsg: {	
	c2cMsgAdmin: {
		subscriptionID: payload.prism_status_publish.subscription_id.uuid
	},
	
	(payload.prism_status_publish.*prism_publish map {
			dms-status-item @(xsi#type : 'tmdd:DMSDeviceStatusCharm') : {
				device-status-header @(xsi#type : 'tmdd:DeviceStatusHeaderCharm'): {
					
					organization-information : {
						organization-id : p('organization_information.organization_id')
					},
					
					device-id : $.prism_id.id,
					
					(device-status : 'on' when $.prism_status_attr.operating_mode == "ok" otherwise {}),				
					(device-status : 'marginal' when $.prism_status_attr.operating_mode == "downgraded" otherwise {}),	
					(device-status : 'failed' when $.prism_status_attr.operating_mode == "defect" otherwise {}),	
										
					last-comm-time : toDateAndTime($.msi_status_attr.last_status_update),
							
					device-type : "cms sign"					
						
				},
				
				current-message : $.prism_status_attr.prism_state_mnemonic,
				
				message-number : $.prism_status_attr.prism_state_nr,
									
				(sign-test : 'unknown' when $.prism_status_attr.prism_test == "Unknown" otherwise {}),
				(sign-test : 'on' when $.prism_status_attr.prism_test == "OK" otherwise {}),
				(sign-test : 'failed' when $.prism_status_attr.prism_test == "not OK" otherwise {})					
									
			}
	})
}]]></dw:set-payload>
        </dw:transform-message>

		<flow-ref name="ntcip_client" doc:name="ntcip_client"/>
	</sub-flow>
	
	<sub-flow name="prism-info-request-inventory">
		<logger message="=== Prism info request inventory incoming ===" level="INFO" category="dynac-interface-app" doc:name="Logger"/>
		<mulexml:xslt-transformer
			xsl-file="xslt/prism/transformToInfoRequestInventoryCDM.xsl"
			doc:name="construct info request" returnClass="java.lang.String">
			<mulexml:context-property key="current_time_in_millis"
				value="#[System.currentTimeMillis()]" />
			<mulexml:context-property key="message_uuid"
				value="#[function:uuid]" />
		</mulexml:xslt-transformer>

		<flow-ref name="outbound_cdm_backbone_request_response"
			doc:name="to CDM" />

		<mulexml:xslt-transformer
			xsl-file="xslt/prism/transformToInfoReplyInventoryNTCIP.xsl"
			doc:name="reply to ntcip response">
			<mulexml:context-property key="organization_id"
				value="${organization_information.organization_id}" />
		</mulexml:xslt-transformer>

	</sub-flow>
	<sub-flow name="prism-info-request-status">
		<logger message="=== Prism info request status incoming ===" level="INFO" category="dynac-interface-app" doc:name="Logger"/>
		<mulexml:xslt-transformer
			xsl-file="xslt/prism/transformToInfoRequestStatusCDM.xsl" doc:name="construct info request"
			returnClass="java.lang.String">
			<mulexml:context-property key="current_time_in_millis"
				value="#[System.currentTimeMillis()]" />
			<mulexml:context-property key="message_uuid"
				value="#[function:uuid]" />
		</mulexml:xslt-transformer>

		<flow-ref name="outbound_cdm_backbone_request_response"
			doc:name="to CDM" />

		<mulexml:xslt-transformer
			xsl-file="xslt/prism/transformToInfoReplyStatusNTCIP.xsl" doc:name="reply to ntcip response">
			<mulexml:context-property key="organization_id"
				value="${organization_information.organization_id}" />
		</mulexml:xslt-transformer>
	</sub-flow>
	<sub-flow name="prism-control-request">
		<logger message="=== Prism control request incoming ===" level="INFO" category="dynac-interface-app" doc:name="Logger"/>
			<!-- workaround to store organization_id to reply back with response -->	
		<set-variable
			value="#[xpath3('/tmdd:dMSControlRequestMsg/device-control-request-header/organization-information/organization-id')]"
			variableName="organizationid" doc:name="Organization Id" />
			
		<mulexml:xslt-transformer
			xsl-file="xslt/prism/transformToControlRequestCDM.xsl" doc:name="construct control"
			returnClass="java.lang.String">
			<mulexml:context-property key="current_time_in_millis"
				value="#[System.currentTimeMillis()]" />
			<mulexml:context-property key="message_uuid"
				value="#[function:uuid]" />
		</mulexml:xslt-transformer>
		<flow-ref name="outbound_cdm_backbone_request_response"
			doc:name="to cdm" />
		<mulexml:xslt-transformer
			xsl-file="xslt/prism/transformToControlReplyNTCIP.xsl" doc:name="reply to ntcip response">
			<mulexml:context-property key="organization_id"
				value="${organization_information.organization_id}" />
		</mulexml:xslt-transformer>
	</sub-flow>
	
</mule>
